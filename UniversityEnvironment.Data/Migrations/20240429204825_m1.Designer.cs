// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityEnvironment.Data;

#nullable disable

namespace UniversityEnvironment.Data.Migrations
{
    [DbContext(typeof(UniversityEnvironmentContext))]
    [Migration("20240429204825_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AdminCourse", b =>
                {
                    b.Property<Guid>("AdminsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.HasKey("AdminsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("AdminCourse");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("QuestionAnswerStudent", b =>
                {
                    b.Property<Guid>("QuestionAnswersId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("QuestionAnswersId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("QuestionAnswerStudent");
                });

            modelBuilder.Entity("StudentTest", b =>
                {
                    b.Property<Guid>("StudentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TestsId")
                        .HasColumnType("char(36)");

                    b.HasKey("StudentsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("StudentTest");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FacultyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.CourseAdmin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.HasKey("AdminId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("coursesadmins", (string)null);
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.CourseStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("coursesstudents", (string)null);
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.CourseTeacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("coursesteachers", (string)null);
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.QuestionAnswerStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("QuestionAnswerId")
                        .HasColumnType("char(36)");

                    b.HasKey("StudentId", "QuestionAnswerId");

                    b.HasIndex("QuestionAnswerId");

                    b.ToTable("questionanswersstudents", (string)null);
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("ScienceDegree")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.TestMark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestMarks");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.TestStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TestId")
                        .HasColumnType("char(36)");

                    b.HasKey("StudentId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("testsstudents", (string)null);
                });

            modelBuilder.Entity("AdminCourse", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Admin", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionAnswerStudent", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.QuestionAnswer", null)
                        .WithMany()
                        .HasForeignKey("QuestionAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTest", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.CourseAdmin", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Admin", "Admin")
                        .WithMany("CoursesAdmins")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Course", "Course")
                        .WithMany("CoursesAdmins")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.CourseStudent", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Course", "Course")
                        .WithMany("CoursesStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Student", "Student")
                        .WithMany("CoursesStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.CourseTeacher", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Course", "Course")
                        .WithMany("CoursesTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Teacher", "Teacher")
                        .WithMany("CoursesTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.QuestionAnswer", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.TestQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.QuestionAnswerStudent", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.QuestionAnswer", "QuestionAnswer")
                        .WithMany("QuestionAnswersStudents")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Student", "Student")
                        .WithMany("QuestionAnswersStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionAnswer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Test", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Course", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.TestMark", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Test", "Test")
                        .WithMany("Marks")
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.TestQuestion", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.TestStudent", b =>
                {
                    b.HasOne("UniversityEnvironment.Data.Model.Student", "Student")
                        .WithMany("TestsStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityEnvironment.Data.Model.Test", "Test")
                        .WithMany("TestsStudents")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Admin", b =>
                {
                    b.Navigation("CoursesAdmins");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Course", b =>
                {
                    b.Navigation("CoursesAdmins");

                    b.Navigation("CoursesStudents");

                    b.Navigation("CoursesTeachers");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.QuestionAnswer", b =>
                {
                    b.Navigation("QuestionAnswersStudents");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Student", b =>
                {
                    b.Navigation("CoursesStudents");

                    b.Navigation("QuestionAnswersStudent");

                    b.Navigation("TestsStudents");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Teacher", b =>
                {
                    b.Navigation("CoursesTeachers");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.Test", b =>
                {
                    b.Navigation("Marks");

                    b.Navigation("Questions");

                    b.Navigation("TestsStudents");
                });

            modelBuilder.Entity("UniversityEnvironment.Data.Model.TestQuestion", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
